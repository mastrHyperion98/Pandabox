import { Button, VerticalBox, LineEdit } from "std-widgets.slint";

export component AuthenticateWindow inherits Window  {
    height: 720px;
    width: 1280px;
    icon: @image-url("../resources/ico.png");
    in property <bool> is_error: false;
    in-out property <string> error_msg;
    property <string> passfield: "";
    callback authenticate(string); // Define a signal that carries a string=
     
    VerticalLayout {
        alignment: center;
        padding-top: 50px;
        spacing: 100px;
        Text {
            text: "Rust Password Manager";
            font-size: 36px;
            color: Colors.darkorange;
            horizontal-alignment: center;
        }

        GridLayout {
            spacing: 50px;
            padding: 25px;
            width: root.width;
            height: root.height;

            Row{
                HorizontalLayout {
                    alignment: center;
                    spacing: 25px;
                    LineEdit {
                        width: root.width * 50%;
                        height: 75px;
                        text <=> root.passfield;
                        input-type: InputType.password;
                        placeholder-text: "password";
                        accepted(text) => {
                            authenticate(root.passfield);
                        }
                    }
                }
            }

            Row {
                HorizontalLayout {
                    alignment: center;
                    Button {
                        width: root.width / 10;
                        height: root.height / 20;
                        primary: true;
                        text: "Authenticate";
                        clicked => {
                            authenticate(root.passfield);
                        }
                    }
                }
            }

            Row {
                HorizontalLayout{
                    alignment: center;
                    Text {
                        font-size: 18px;
                        text: root.error_msg;
                        // The error message is also colored red
                        color: #ff5555;
                        // The error message is only visible when `is-error` is true
                        visible: root.is_error;
                    }
                }
            }
        }
    }
}