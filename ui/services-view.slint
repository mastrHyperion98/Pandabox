import { Button } from "std-widgets.slint";
import { Palette, StandardTableView, ScrollView, StyleMetrics, LineEdit } from "std-widgets.slint";
import { ServiceForm, ServiceData } from "service-form.slint";


// Define a global property that will hold our table data
export global AppData {
    in-out property <[[StandardListViewItem]]> table-rows: [
        [
            { text: "Netflix" },
            { text: "email_abc@def.com" },
            { text: "NotARealUser" },
            { text: "NotAPassword" },
            { text: "Netflix & Chill creds" },
            { text: "2026-01-01T10:12:23" },
        ],
        [
            { text: "NotLastNetflix" },
            { text: "email_abc@def.com" },
            { text: "NotARealUser" },
            { text: "NotAPassword" },
            { text: "Netfli2 & Chill creds" },
            { text: "2026-01-01T10:12:23" },
        ],
    ];

    // Callback to trigger adding a row from the UI
    callback add-new-row();
}

export struct NewEntryData {
    service: string,
    email: string,
    username: string,
    password: string,
    notes: string,
}


export component ServiceView{
    min-width: 1280px;
    min-height: 720px;
    
    // Form state management
    in-out property <bool> show-form: false;
    in-out property <string> form-mode: "Add New Entry";
    in-out property <ServiceData> current-service-data;
    
    callback generate_password()->string;

  // Main content area
  VerticalLayout {
      padding: 25px;
      spacing: 50px;
      
      HorizontalLayout {
          spacing: 25px;
          Button {
              text: "Add"; primary: true;
              clicked => {
                  root.form-mode = "Add";
                  root.current-service-data = {};
                  root.show-form = true;
                  }
              }
          Button {
              text: "Edit";
              clicked => {
                  root.form-mode = "Edit";
                  // TODO: Set current-service-data from selected row
                  root.show-form = true;
              }
          }
          Button {text: "Delete";}
          Button {text: "Duplicate & Refresh";}
      }

      StandardTableView {
          columns: [
              { title: "Application", min_width: 100px},
              { title: "Email", min_width: 100px },
              { title: "Username",min_width: 100px },
              { title: "Password", min_width: 100px },
              { title: "Description", min_width: 100px },
              { title: "Last Update",  min-width: 150px, horizontal_stretch: 0},
          ];
          // figure out how to dynamically set this data
          rows: AppData.table-rows;
      }
  }
  
  // Slide-in form (moved outside layout)
  if root.show-form: Rectangle {
      width: 400px;
      height: parent.height;
      x: root.show-form ? parent.width - self.width : parent.width;
      y: 0;
      z: 100;
      background: #2d2d2d; // Dark background to match your UI theme
      border-radius: 8px;
      drop-shadow-blur: 10px;
      drop-shadow-color: #00000040;

      ServiceForm {
          width: parent.width;
          height: parent.height;
          title: root.form-mode;
          service-data: root.current-service-data;

          save-pressed(data) => {
              // Handle save logic here
              root.show-form = false;
          }

          cancel-pressed() => {
              root.show-form = false;
          }

          generate-password() => {
              self.password = generate_password();
          }
      }
  }
 }
