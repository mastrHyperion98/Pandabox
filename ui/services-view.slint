import { Button } from "std-widgets.slint";
import { Palette, StandardTableView, ScrollView, StyleMetrics, LineEdit } from "std-widgets.slint";
import { ServiceForm, ServiceData } from "service-form.slint";


// Define a global property that will hold our table data
export global AppData {
    in-out property <[[StandardListViewItem]]> table-rows: [
        [
            { text: "Netflix" },
            { text: "email_abc@def.com" },
            { text: "NotARealUser" },
            { text: "NotAPassword" },
            { text: "Netflix & Chill creds" },
            { text: "2026-01-01T10:12:23" },
        ],
        [
            { text: "NotLastNetflix" },
            { text: "email_abc@def.com" },
            { text: "NotARealUser" },
            { text: "NotAPassword" },
            { text: "Netfli2 & Chill creds" },
            { text: "2026-01-01T10:12:23" },
        ],
    ];
}

export enum View {
    Form,
    Table
}

export enum FormMode {
    Add,
    Edit
}

export component ServiceView{
    min-width: 1280px;
    min-height: 720px;
    
    // Form state management
    in-out property <View> show-state: View.Table;
    in-out property <FormMode> form-mode: FormMode.Add;
    in-out property <ServiceData> current-service-data;
    property <int> current-row: -1;
    
    // Convert FormMode enum to string for display
    property <string> form-mode-text: root.form-mode == FormMode.Add ? "Add" : "Edit";
    
    callback generate_password()->string;
    callback save_service(ServiceData, string, int);

  // Main content area
  if root.show-state == View.Table: VerticalLayout {
      padding: 25px;
      spacing: 50px;

      HorizontalLayout {
          spacing: 25px;
          Button {
              text: "Add"; primary: true;
              clicked => {
                  root.form-mode = FormMode.Add;
                  root.current-service-data = {};
                  root.show-state = View.Form;
                  }
              }
          Button {
              text: "Edit";
              // Disable Edit button if no row is selected
              enabled: root.current-row != -1;
              clicked => {
                  root.form-mode =  FormMode.Edit;
                  // The data is already set by the table's current-row-changed callback.
                  root.show-state = View.Form;
              }
          }
          Button {text: "Delete"; /* TODO: Add clicked handler to delete item */ }
          Button {text: "Duplicate & Refresh"; /* TODO: Add clicked handler for this action */ }
      }

      StandardTableView {
          columns: [
              { title: "Application", min_width: 100px},
              { title: "Email", min_width: 100px },
              { title: "Username",min_width: 100px },
              { title: "Password", min_width: 100px },
              { title: "Description", min_width: 100px },
              { title: "Last Update",  min-width: 150px, horizontal_stretch: 0},
          ];
          rows: AppData.table-rows;
          current-row-changed(current-row) => {
             root.current-row = current-row;
             root.current-service-data = {
               service: AppData.table-rows[current-row][0].text,
               email: AppData.table-rows[current-row][1].text,
               username: AppData.table-rows[current-row][2].text,
               password: AppData.table-rows[current-row][3].text,
               notes: AppData.table-rows[current-row][4].text,
           };
          }
      }
  }

  // Slide-in form (moved outside layout)
  if root.show-state == View.Form: Rectangle {
      width: parent.width;
      height: parent.height;

      ServiceForm {
          width: parent.width;
          height: parent.height;
           title: root.form-mode-text;
          service-data: root.current-service-data;
          service-name: root.current-service-data.service;
          email: root.current-service-data.email;
          username: root.current-service-data.username;
          password: root.current-service-data.password;
          confirm-password: root.current-service-data.password;
          notes: root.current-service-data.notes;

          save-pressed(data) => {
              // Handle save logic here
              root.save_service(data, root.form-mode-text, root.current-row);
              root.show-state = View.Table;
          }

          cancel-pressed() => {
              root.show-state = View.Table;
          }

          generate-password() => {
              self.password = generate_password();
              self.confirm-password = self.password;
              
          }
      }
  }
 }